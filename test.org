#+title:git工作流程
* TODO GIT学习进度流程
** DONE 初步建立Git版本控制系统 [1/1]
   CLOSED: [2018-04-03 周二 17:04]
   - State "DONE"       from "TODO"       [2018-04-03 周二 17:04]
*** DONE 前期建立工作
    CLOSED: [2018-04-03 周二 17:04] DEADLINE: <2018-04-08 周日>
    - State "DONE"       from "TODO"       [2018-04-03 周二 17:04]
**** git基础
     使用github进行前期测试，并完成git基本命令的学习；
**** 于github上建立test文件夹，学习远程版本控制和分支管理
** DONE 于服务器搭建git环境，同步进行文件管理
   CLOSED: [2018-04-03 周二 17:04]
   - State "DONE"       from "TODO"       [2018-04-03 周二 17:04]
*** 启动业余任务，构建远程写作环境
** DONE 学习分支操作，进行分支管理
   CLOSED: [2018-04-09 周一 00:58] DEADLINE: <2018-04-05 周四>
   - State "DONE"       from "TODO"       [2018-04-09 周一 00:58]
* Note
*** 添加一个文件到git目录
   #+BEGIN_EXAMPLE
   git init：初始化一个仓库，在需要使用git进行版本控制的时候使用
   git add "FileName"
   git commit -m 
     -m：添加提交说明；
     commit一次性可以提交多个文件，可以在add时添加多个不同的文件
   #+END_EXAMPLE 
*** 检查文件状态并提交修改
    #+BEGIN_EXAMPLE
    git status：查看当前仓库文件的状态
    git diff：查看文件上次提交后有拿些修改
    然后可以执行git add 和 git commit 提交修改
    #+END_EXAMPLE
*** 版本回退和修改查询
    #+BEGIN_EXAMPLE
    git log
      显示所有提交日志

    git reset --hard HEAD^
      回退到上一个版本：
    git reset --hard COMMIT_ID
      回退到指定的版本：
    get reflog
      查看所有版本的操作记录
      
    git checkout：是用版本库里的版本替换工作区的版本 
    #+END_EXAMPLE
    首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
*** Git控制理念
    git使用add选项首先将文件的修改内容存放至暂存区(index/stage)
    
    然后再使用commit时将暂存区的所有内容提交至当前分支；
*** 远程仓库
    #+BEGIN_EXAMPLE
    $ git remote add origin git@github.com:LOVEXUE/Test-git.git
    $ git push -u origin master
      将本地仓库内容推送至github中（先进入本地仓库）
     
      建立远程仓库后，要将文件夹的权限进行调整

    git remote add origin git@server-name:path/repo-name.git
      关联远程仓库
    git push -u origin master
      推送本地内容至远程仓库中
    git clone git@server-name:path/repo-name.git /path/to/localfile
      从远程仓库复制文件到本地
    $ git fetch[remote]
      下载远程仓库的所有变动
    #+END_EXAMPLE
*** 使用密钥文件进行远程连接
    在要与远程服务器的连接上创建密钥对，然后将公钥文件内容复制至服务器相应帐号下: ~/.ssh/authorized_key
    #+BEGIN_EXAMPLE
    建立远程仓库
    $ sudo git init --bare sample.git
    $ sudo chown -R git:git sample.git
    记得要修改权限

    # 如果authorized_keys不存在，则创建它
      touch ~/.ssh/authorized_keys
    # 将上传的公钥添加到authorized_keys后面
      cat ~/.ssh/id_rsa.pub_192.168.1.104 >> ~/.ssh/authorized_keys
    # 修改authorized_keys权限
      chmod 700 ~/.ssh
      chmod 600 ~/.ssh/authorized_keys
    # 查看authorized_keys最后一行
      tail -1 ~/.ssh/authorized_keys   
    #+END_EXAMPLE
*** 可以配置变量别名以更好的使用git
    git config --global alias.aliasname  command_name
** 分支管理
*** 分支冲突和解决
    #+BEGIN_EXAMPLE
    步骤：
    1.切换到要合并到的分支，并进行合并操作，如果分支冲突，git会给出提示（相应的文件）
    2.打开文件，文件中不同的部分会直接给出标示！
    3.在要合并的分支下打开文件，进行修改并再次提交！

    查看分支历史（带参数的log命令）
      $ git log --graph --pretty=oneline --abbrev-commit
    #+END_EXAMPLE
*** 分支创建和切换
   #+BEGIN_EXAMPLE
   查看当前分支
     $ git branch
   创建一个新的分支
     $ git branch BranchName
   删除一个分支
     $ git branch -d BranchName
   切换到某个分支
     $ git checkout BranchName
   创建并切换到某个分支
     $ git checkout -b BranchName
   合并某个分支到当前分支
     git merge <name>
   #+END_EXAMPLE 
*** 暂存工作内容
    #+BEGIN_EXAMPLE
    将当前工作现场“储藏”
      $ git stash
    查看被储藏的现场
      $ git stash list
    恢复工作现场
      $ git stash apply（恢复的同时不删除stash内容）
        $ git stash drop（删除stash内容）
    
      $ git stash pop （恢复的同时删除stash内容）
    #+END_EXAMPLE
* Test_reset
  git@118.24.23.137:/home/git/fiction.git
